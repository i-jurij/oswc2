<?php

namespace App\UI\Sign;

use Nette;
use Nette\Application\UI\Form;
use Nette\Utils\Html;

final class SignPresenter extends Nette\Application\UI\Presenter
{
    protected function createComponentForm(): Form
    {
        $form = new Form();

        // setup custom rendering
        $renderer = $form->getRenderer();
        $renderer->wrappers['group']['container'] = 'div class="bgcontent shadow round m1 p2"';
        $renderer->wrappers['controls']['container'] = 'div';
        $renderer->wrappers['pair']['container'] = 'div';
        $renderer->wrappers['label']['container'] = 'p';
        $renderer->wrappers['control']['container'] = null;

        $form->addGroup('--- üë• ---');

        $form->addText('username', '–ò–º—è:')
            ->setRequired('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')
            ->addRule($form::MinLength, '–ò–º—è –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ %d —Å–∏–º–≤–æ–ª–æ–≤', 3)
            ->addRule($form::Pattern, '–ò–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π', '^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\-_]{3,25}$')
            ->setMaxLength(25);

        $form->addPassword('password', '–ü–∞—Ä–æ–ª—å:')
            ->setRequired('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.')
            ->addRule($form::MinLength, '–ü–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ %d —Å–∏–º–≤–æ–ª–æ–≤', 4)
            ->setMaxLength(120);

        return $form;
    }

    protected function createComponentSignInForm(): Form
    {
        $form = $this->createComponentForm();
        $form->setHtmlAttribute('id', 'enter_to_admin')
            ->setHtmlAttribute('class', 'form');

        // $form->addHidden('userid');

        $form->addSubmit('send', '–í–æ–π—Ç–∏');

        $form->addGroup('--- ‚úç ---');
        $url_reg = $this->link('Sign:up');
        $form->addButton('signup', Html::el('div')->setHtml('<a href="'.$url_reg.'">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>'))
            ->setHtmlAttribute('class', 'pseudo');

        $form->addGroup('--- ¬ß ---');
        $url_politic = $this->link('Home:politic');
        $form->addButton('politic', Html::el('div')->setHtml('<a href="'.$url_politic.'">–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>'))
            ->setHtmlAttribute('class', 'pseudo');

        $form->onSuccess[] = $this->userLogin(...);

        return $form;
    }

    public function createComponentSignUpForm()
    {
        $form = $this->createComponentForm();

        $form->setHtmlAttribute('id', 'signup')
            ->setHtmlAttribute('class', 'form');

        $form->addPassword('passwordVerify', '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
            ->setRequired('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫—É')
            ->addRule($form::Equal, '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–æ–ª—è', $form['password'])
            ->addRule($form::MinLength, '–ü–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ %d —Å–∏–º–≤–æ–ª–æ–≤', 4)
            ->setMaxLength(120)
            ->setOmitted();

        $form->addEmail('email', '–≠–ª.–ø–æ—á—Ç–∞:')
            ->setEmptyValue('user@user.com');

        $form->addSubmit('send', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');

        $form->addGroup('--- üîì ---');
        $url_reg = $this->link('Sign:in');
        $form->addButton('register', Html::el('div')->setHtml('<a href="'.$url_reg.'">–í–æ–π—Ç–∏</a>'))
            ->setHtmlAttribute('class', 'pseudo');

        $form->addGroup('--- ¬ß ---');
        $url_politic = $this->link('Home:politic');
        $form->addButton('politic', Html::el('div')->setHtml('<a href="'.$url_politic.'">–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>'))
            ->setHtmlAttribute('class', 'pseudo');

        $form->onSuccess[] = $this->processSignUpForm(...);

        return $form;
    }

    private function userLogin(Form $form, \stdClass $data): void
    {
        try {
            // create if not exist tables users, roles, permissions
            $this->getUser()->login($data->username, $data->password);
            /*
            if ($this->getUser()->isInRole('user')) {
                $this->redirect('Home:');
            } elseif ($this->getUser()->isInRole('master')
                || $this->getUser()->isInRole('moder')
                || $this->getUser()->isInRole('admin')
            ) {
                $this->redirect('Admin:');
            }
            */
            $this->redirect('Admin:');
        } catch (Nette\Security\AuthenticationException $e) {
            $form->addError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.');
        }
    }

    private function processSignUpForm(Form $form, \stdClass $data): void
    {
        try {
            // register user
            $this->flashMessage('–ù–∞ –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤—ã—Å–ª–∞–Ω–æ –ø–∏—Å—å–º–æ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø–∏—Å—å–º–µ.', 'info');
        } catch (Exception $e) {
            $form->addError('Unknown error.');
        }
    }

    public function actionOut(): void
    {
        $this->getUser()->logout();
        $this->flashMessage('–í—ã –≤—ã—à–ª–∏.');
        $this->redirect('Home:');
    }
}
